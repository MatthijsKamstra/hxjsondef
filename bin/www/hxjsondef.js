// Generated by Haxe 3.3.0
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10?"0" + m:"" + m) + "-" + (d < 10?"0" + d:"" + d) + " " + (h < 10?"0" + h:"" + h) + ":" + (mi < 10?"0" + mi:"" + mi) + ":" + (s < 10?"0" + s:"" + s);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Hxjsondef = function() {
	this.typeDefMap = new haxe_ds_StringMap();
	this._fileName = "foobar";
	this.isComment = false;
	this.str = "";
};
Hxjsondef.__name__ = true;
Hxjsondef.prototype = {
	convert: function(name,content) {
		this.str = "";
		this.typeDefMap = new haxe_ds_StringMap();
		this.convert2Typedef("" + this.capString(name) + "Obj",content);
		var tmp = this.typeDefMap.keys();
		while(tmp.hasNext()) {
			var key = tmp.next();
			var _this = this.typeDefMap;
			var arr = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
			this.str += "\ntypedef " + key + " =\n{\n";
			var _g1 = 0;
			var _g = arr.length;
			while(_g1 < _g) this.str += "" + arr[_g1++] + "\n";
			this.str += "};\n";
		}
		this.str = this.headerInfo() + this.str;
		return this.str;
	}
	,convert2Typedef: function(typeName,pjson) {
		var _this = this.typeDefMap;
		var value = [];
		if(__map_reserved[typeName] != null) {
			_this.setReserved(typeName,value);
		} else {
			_this.h[typeName] = value;
		}
		this.readJson(typeName,JSON.parse(pjson));
	}
	,readJson: function(typeName,pjson,tab) {
		if(tab == null) {
			tab = "\t";
		}
		if(pjson.length != null) {
			this.readJson(typeName,pjson[0],tab);
			return;
		}
		var _g = 0;
		var _g1 = Reflect.fields(pjson);
		while(_g < _g1.length) {
			var varName = _g1[_g];
			++_g;
			var store = "";
			var c = "";
			if(this.isComment) {
				c = " // " + varName + ":" + Std.string(Reflect.field(pjson,varName));
			}
			var _g2 = Type["typeof"](Reflect.field(pjson,varName));
			switch(_g2[1]) {
			case 0:
				store = "" + tab + "var " + varName + " : Dynamic; // " + varName + ":" + Std.string(Reflect.field(pjson,varName)) + " // [mck] provide json without `null` values";
				break;
			case 1:
				store = "" + tab + "var " + varName + " : Int;" + c;
				break;
			case 2:
				store = "" + tab + "var " + varName + " : Float;" + c;
				break;
			case 3:
				store = "" + tab + "var " + varName + " : Bool;" + c;
				break;
			case 4:
				store = "" + tab + "var " + varName + " : " + this.capString(varName) + ";" + c;
				this.convert2Typedef(this.capString(varName),JSON.stringify(Reflect.field(pjson,varName)));
				break;
			case 6:
				switch(_g2[2]) {
				case Array:
					store = this.whatForSortArray(varName,Reflect.field(pjson,varName),tab);
					break;
				case String:
					store = "" + tab + "var " + varName + " : String;" + c;
					break;
				default:
					console.log("[FIXME] type: " + Std.string(Type["typeof"](Reflect.field(pjson,varName))) + (" / " + varName + ": ") + Std.string(Reflect.field(pjson,varName)));
				}
				break;
			default:
				console.log("[FIXME] type: " + Std.string(Type["typeof"](Reflect.field(pjson,varName))) + (" / " + varName + ": ") + Std.string(Reflect.field(pjson,varName)));
			}
			var _this = this.typeDefMap;
			var key = "" + typeName;
			var arr = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
			arr.push(store);
			var _this1 = this.typeDefMap;
			var key1 = "" + typeName;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,arr);
			} else {
				_this1.h[key1] = arr;
			}
		}
	}
	,whatForSortArray: function(varName,value,tab) {
		if(tab == null) {
			tab = "\t";
		}
		var xc = "";
		var type = "Dynamic";
		var _g = Type["typeof"](value[0]);
		switch(_g[1]) {
		case 0:
			type = "Dynamic";
			if(this.isComment) {
				xc = " // [mck] provide json without `null` values";
			} else {
				xc = " // " + varName + ":" + Std.string(value[0]) + " // [mck] provide json without `null` values";
			}
			break;
		case 1:
			type = "Int";
			break;
		case 2:
			type = "Float";
			break;
		case 3:
			type = "Bool";
			break;
		case 4:
			type = "" + this.capString(varName);
			this.convert2Typedef(this.capString(varName),JSON.stringify(value[0]));
			break;
		case 6:
			switch(_g[2]) {
			case Array:
				type = "Dynamic";
				if(this.isComment) {
					xc = " // [FIXME] (array) not sure why you would nest this deep";
				} else {
					xc = " // " + varName + ":" + Std.string(value[0]) + " // [FIXME] (array) not sure why you would nest this deep";
				}
				break;
			case String:
				type = "String";
				break;
			default:
				console.log("[FIXME] : " + Std.string(Type["typeof"](value[0])));
			}
			break;
		default:
			console.log("[FIXME] : " + Std.string(Type["typeof"](value[0])));
		}
		var c = "";
		if(this.isComment) {
			c = " // " + varName + ":" + Std.string(value[0]);
		}
		return "" + tab + "var " + varName + " : Array<" + type + ">;" + c + xc;
	}
	,headerInfo: function() {
		var temp = "";
		var tmp = this.typeDefMap.keys();
		while(tmp.hasNext()) temp += "\n * \t\t" + tmp.next();
		var str = "";
		str += "package;";
		if(!this.isComment) {
			str += "\n\n" + "/**" + ("\n * Generated with " + Hxjsondef.NAME + " (version " + Hxjsondef.VERSION + ") on ") + Std.string(new Date()) + ("\n * from : " + this.get_fileName()) + "\n * " + "\n * AST = Abstract Syntax Tree" + "\n * " + "\n * Note:" + "\n * If you profide a .json there should be no null values" + "\n * comments in this document show you the values that need to be changed!" + "\n * " + "\n * Some (backend)-developers choose to hide empty/null values, you can add them:" + "\n * \t\t@optional var _id : Int;" + "\n * " + "\n * Name(s) that you possibly need to change:" + ("" + temp) + "\n */" + "\n";
		}
		return str;
	}
	,capString: function(str) {
		var tempstr = "";
		tempstr = str.substring(0,1).toUpperCase() + str.substring(1,str.length);
		return tempstr;
	}
	,get_fileName: function() {
		return this._fileName;
	}
	,set_fileName: function(value) {
		return this._fileName = value;
	}
	,__class__: Hxjsondef
};
var MainJS = function() {
	this.jsonExample2 = "{\n\t\"title\": \"Product\",\n\t\"description\": \"A product from Acme's catalog\",\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"id\": {\n\t\t\t\"description\": \"The unique identifier for a product\",\n\t\t\t\"type\": \"integer\"\n\t\t},\n\t\t\"name\": {\n\t\t\t\"description\": \"Name of the product\",\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"price\": {\n\t\t\t\"type\": \"number\",\n\t\t\t\"minimum\": 0,\n\t\t\t\"exclusiveMinimum\": true\n\t\t},\n\t\t\"tags\": {\n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t\"minItems\": 1,\n\t\t\t\"uniqueItems\": true\n\t\t}\n\t},\n\t\"required\": [\"id\", \"name\", \"price\"]\n}";
	this.jsonExample1 = "{\n\t\"id\": 1,\n\t\"name\": \"A green door\",\n\t\"price\": 12.50,\n\t\"tags\": [\"home\", \"green\"]\n}";
	var _gthis = this;
	$(function() {
		$("#btn_convert").click($bind(_gthis,_gthis.onClick));
		$("#btn_select").click($bind(_gthis,_gthis.onClick));
		$("#example1").click($bind(_gthis,_gthis.onClick));
		$("#example2").click($bind(_gthis,_gthis.onClick));
		_gthis.inArea = $("#in_json");
		_gthis.outArea = $("#out_hxjson");
		_gthis.inTextArea = js_Boot.__cast(window.document.getElementById("in_json") , HTMLTextAreaElement);
		_gthis.outTextArea = js_Boot.__cast(window.document.getElementById("out_hxjson") , HTMLTextAreaElement);
		_gthis.hxjsondef = new Hxjsondef();
		_gthis.hxjsondef.set_fileName(window.location.href);
		_gthis.convert(_gthis.jsonExample1);
	});
};
MainJS.__name__ = true;
MainJS.main = function() {
	new MainJS();
};
MainJS.prototype = {
	convert: function(str) {
		this.inArea.val(str);
		this.outArea.val(this.hxjsondef.convert("foobar",str));
		this.outTextArea.scrollTop = this.outTextArea.scrollHeight;
		this.outTextArea.select();
	}
	,selectAll: function() {
		this.outTextArea.select();
	}
	,onClick: function(e) {
		var id = e.currentTarget.id;
		switch(id) {
		case "btn_convert":
			this.convert(this.inArea.val());
			break;
		case "btn_select":
			this.selectAll();
			break;
		case "example1":
			this.convert(this.jsonExample1);
			break;
		case "example2":
			this.convert(this.jsonExample2);
			break;
		}
		e.preventDefault();
	}
	,__class__: MainJS
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var ValueType = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
Type.__name__ = true;
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
Hxjsondef.NAME = "HxJsonDef";
Hxjsondef.VERSION = "0.0.3";
js_Boot.__toStr = { }.toString;
MainJS.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=hxjsondef.js.map